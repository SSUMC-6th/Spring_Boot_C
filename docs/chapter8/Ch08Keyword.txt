1. @JsonPropertyOrder
2. @JsonInclude
3. @RestController
4. @RequiredArgsConstructor
5. 의존성 주입
6. @Slf4j
7. @RestControllerAdvice(annotations = {RestController.class})

1. Spring의 의존성 주입
(1) 필드 주입
- 의존성으로 주입하고자 하는 필드(주입 받는 필드 X)에 직접 @Autowired
- 단점 많음(외부 변경 힘듦 등등)

(2) Setter Based 주입
- setter 메서드에 @Autowired
- 단점: setter 메서드를 public으로 둬야함 -> 어디서든 변경 가능해짐

(3) 생성자 주입
- 권장하는 방법
- 클래스의 생성자 메서드에 파라미터를 통해 의존성 주입
- 생성자가 1개만 존재하는 경우 @Autowired를 생략해도 자동으로 주입

2. IoC 컨테이너
- IoC: 메서드, 객체의 호출작업을 개발자가 결정하는 것이 아니라, 외부(프레임워크)에서 결정하는 것
- Ioc 컨테이너는 객체를 생성, 관리하고 의존성 주입도도 하는 컨테이너!!

3. @RestControllerAdvice
- @ControllerAdvice의 역할을 수행(예외처리)하고 @ResponseBody를 통해 객체를 리턴하는 것
- 컨트롤러에서 리턴하는 값이 응답 값의 body로 세팅되어 클라이언트에게 전달됨

4. lombok
- 어노테이션 기반으로 코드를 자동완성 해주는 라이브러리
- @AllArgsConstructor: 모든 변수를 사용하는 생성자를 자동완성
- @NoArgsConstructor: 어떠한 변수도 사용하지 않는 기본 생성자를 자동완성
- @RequiredArgsConstructor: 특정 변수만을 활용하는 생성자를 자동완성
- @Builder: 해당 클래스의 객체 생성 시 Builder 패턴을 적용
- @Slf4J, Log4j2: 해당 클래스의 로그 클래스를 자동완성